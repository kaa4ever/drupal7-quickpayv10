<?php
/**
 * @file
 * Integrates quickpay.dk redirected payment service.
 */

// The protocol version we implement for the payment window.
define('QUICKPAY_VERSION', 'v10');

function quickpay_menu() {
  $items = array();
  $items['quickpay/%'] = array(
    'title' => 'Quickpay callback page',
    'page callback' => '_quickpay_callback',
    'page arguments' => array(1),
    'access arguments' => array(1),
    'access callback' => '_quickpay_callback_access',
  );
  $items['admin/config/system/quickpay'] = array(
    'title' => 'Quickpay configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_quickpay_configuration_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'quickpay.forms.inc',
  );
  return $items;
}

/**
 * Get a payment form.
 *
 * @param $form
 * @param $form_state
 * @param $parameters
 *   A array of parameters:
 *   - order_id (required)
 *   - currency (required)
 *   - amount (required)
 *   - continue_url (required)
 *   - cancel_url (required)
 *   - custom_variables
 *
 * @return mixed
 *
 * @throws \QuickpayException
 */
function quickpay_payment_form($form, &$form_state, $parameters) {
  $helper = new QuickpayHelper();
  // Start by checking parameters.
  $helper->checkParameters($parameters);
  // Build the form.
  $form['#method'] = 'POST';
  $form['#action'] = 'https://payment.quickpay.net';
  // Required variables.
  $data['version'] = QUICKPAY_VERSION;
  $data['merchant_id'] = variable_get('quickpay_merchant_id', '');
  $data['agreement_id'] = variable_get('quickpay_agreement_id', '');
  $data['order_id'] = $parameters['order_id'];
  // Ensure that Order number is at least 4 characters. Else Quickpay will
  // reject the request.
  if (strlen($data['order_id']) < 4) {
    $order_prefix = variable_get('quickpay_order_prefix', '');
    $data['order_id'] = $order_prefix . substr('0000' . $parameters['order_id'], -4 + strlen($order_prefix));
  }
  $currency_info = $helper->currencyInfo($parameters['currency']);
  $data['amount'] = $helper->wireAmount($parameters['amount'], $currency_info);
  $data['currency'] = $currency_info['code'];
  $data['continueurl'] = $parameters['continue_url'];
  $data['cancelurl'] = $parameters['cancel_url'];
  $data['callbackurl'] = url('quickpay/' . $parameters['order_id'], array('absolute' => TRUE));
  // Set the optional variables.
  $data['language'] = $helper->getLanguage();
  $data['autocapture'] = variable_get('quickpay_autocapture', FALSE) ? 1 : 0;
  $data['payment_methods'] = $helper->getPaymentMethods();
  $data['autofee'] = variable_get('quickpay_autofee', FALSE) ? 1 : 0;
  // Add any custom fields.
  if (isset($parameters['custom_variables']) && is_array($parameters['custom_variables'])) {
    foreach ($parameters['custom_variables'] as $key => $value) {
      $data['variables[' . $key . ']'] = $value;
    }
  }
  // Build the checksum.
  $data['checksum'] = $helper->getChecksum($data);
  // Add all data elements as hidden input fields.
  foreach ($data as $name => $value) {
    $form[$name] = array('#type' => 'hidden', '#value' => $value);
  }
  $form['submit'] = array(
    '#id' => 'quickpay-submit-button',
    '#type' => 'submit',
    '#value' => t('Continue to QuickPay'),
  );
  return $form;
}

function _quickpay_callback_access($order_id) {
  /*$content = json_decode($request->getContent());
  $quickpay = Quickpay::loadFromRequest($content);
  //return hash_hmac("sha256", $request, $this->private_key);
  if ($quickpay) {
    $checksum_calculated = $quickpay->getChecksumFromRequest($request->getContent());
    $checksum_requested = $request->server->get('HTTP_QUICKPAY_CHECKSUM_SHA256');
    if (!empty($checksum_requested) && strcmp($checksum_calculated, $checksum_requested) === 0) {
      return AccessResult::allowed();
    }
    \Drupal::logger('quickpay')->error('Computed checksum does not match header checksum.');
  }
  else {
    \Drupal::logger('quickpay')->error('Could not load a Quickpay configuration from request.');
  }
  return AccessResult::forbidden();*/
}

/**
 * quickpay.callback:
path: '/quickpay/{order_id}'
defaults:
_controller: '\Drupal\quickpay\Controller\CallbackController::callback'
_title:
requirements:
_quickpay_callback_access_check: 'TRUE'
 *
 *
quickpay.configuration_list:
path: '/admin/config/quickpay'
defaults:
_entity_list: 'configuration'
_title:
requirements:
_permission: 'administer site configuration'
 *
 */

